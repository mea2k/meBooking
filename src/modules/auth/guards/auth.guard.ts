// eslint-disable-next-line prettier/prettier
import { CanActivate, ExecutionContext, Injectable, UnauthorizedException } from '@nestjs/common';
import { JwtService } from '@nestjs/jwt';
import { Request } from 'express';
import { ConfigService } from '../../config/config.service';

/** GUARD - –ü–†–û–í–ï–†–ö–ê –ê–£–¢–ï–ù–¢–ò–§–ò–¶–ò–†–û–í–ê–ù–ù–û–°–¢–ò –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø
 * 						–ù–ê –û–°–ù–û–í–ï JWT –ò–ó –ó–ê–ì–û–õ–û–í–ö–ê –ó–ê–ü–†–û–°–ê
 * @constructor
 * @params NONE (–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –±–µ—Ä–µ—Ç—Å—è –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞ Request)
 * @returns TRUE –ò–õ–ò –∏—Å–∫–ª—é—á–µ–Ω–∏–µ UnauthorizedException
 */
@Injectable()
export class AuthGuard implements CanActivate {
	constructor(
		// JWT-—Å–µ—Ä–≤–∏—Å –±–∏–±–ª–∏–æ—Ç–µ—á–Ω—ã–π
		private jwtService: JwtService,
		// –ú–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Å–µ—Ä–≤–∏—Å
		private configService: ConfigService,
	) {}

	async canActivate(context: ExecutionContext): Promise<boolean> {
		const request = context.switchToHttp().getRequest();
		const token = this.extractTokenFromHeader(request);
		if (!token) {
			throw new UnauthorizedException();
		}
		try {
			const payload = await this.jwtService.verifyAsync(token, {
				secret: this.configService.get('JWT_SECRET'),
			});
			// üí° We're assigning the payload to the request object here
			// so that we can access it in our route handlers
			request['user'] = payload;
		} catch (e) {
			throw new UnauthorizedException((e as Error).message);
		}

		//console.log('AuthGuard', request.user);

		return true;
	}

	private extractTokenFromHeader(request: Request): string | undefined {
		const [type, token] = request.headers.authorization?.split(' ') ?? [];
		//console.log('Header: ', token);
		return type === 'Bearer' ? token : undefined;
	}
}
